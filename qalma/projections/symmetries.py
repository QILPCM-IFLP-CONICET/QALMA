from functools import reduce

from qalma.operators import ScalarOperator
from qalma.operators.states.qutip import QutipDensityOperator
from qalma.qutip_tools.tools import reduce_to_proper_spaces


def project_parity_like(state, op_name: str):
    """
    Build a (op_name)-parity symmetry restored state from a broken symmetry
    state.
    op_name must be the name of a local operator, with spectrum +/-1
    """
    if isinstance(state, ScalarOperator):
        return state
    system = state.system
    rho = state.to_qutip_operator()
    site_names = rho.site_names
    block = tuple(sorted(site_names, key=lambda x: site_names[x]))
    rho = rho.to_qutip(block)
    u_gen = reduce(
        lambda x, y: x * y, [system.site_operator(op_name, site) for site in block]
    ).to_qutip(block)
    rho = (u_gen * rho * u_gen.dag() + rho) * 0.5
    return QutipDensityOperator(
        rho,
        system,
        names=site_names,
        normalized=True,
    )


def project_conserved_quantity(state, op_name: str):
    """
    Build the average of the gibbs_state invariant under the (diagonal)
    unitaries generated by the local operator `op_name`.
    """
    if isinstance(state, ScalarOperator):
        return state
    rho_qutip = state.to_qutip_operator()
    system = rho_qutip.system
    site_names = rho_qutip.site_names
    block = tuple(sorted(site_names, key=lambda name: site_names[name]))
    if not block:
        return state

    try:
        conserved = reduce(
            lambda x, y: x + y, (system.site_operator(op_name, site) for site in block)
        )
    except TypeError:
        raise ValueError(
            f"{op_name} is not a valid local operator name for some sites."
        )

    return QutipDensityOperator(
        reduce_to_proper_spaces(rho_qutip.operator, conserved.to_qutip(block)),
        rho_qutip.system,
        names=site_names,
        normalized=True,
    )
